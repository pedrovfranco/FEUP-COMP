import clava.autopar.Parallelize;

aspectdef OmpParallelization

	var $loops = [];
	select loop end
	apply
	    $loops.push($loop);
	end
	print($loops.length);
	
end

var $lines = [];
var $flags = [];
var $catflags = [];

function parseflags()
{
	for (var i = 1; i < $lines.length; i++)
	{
		var line = $lines[i];

		if (line.search("-") == -1 && $flags.length != 0)
		{
			$flags[$flags.length-1][1] = $flags[$flags.length-1][1].concat(line['replace'](/\s\s+/g, " ")['replace'](/\r/g, "")['replace'](".", ""));
			continue;
		}

		var pos = line.search("-f");

		if (pos == -1)
			continue;

		var j, flag = false;
		for (j = pos; j < line.length; j++)
		{
			var currChar = line.charAt(j);

			if (currChar == ' ')
			{
				flag = true;
				continue;
			}

			else if (flag)
				break;
		}

		var flagName = line.substr(pos, j-2).trim();

		if (flagName.search("=") != -1)
			continue;

		var description = line.substr(j)['replace']("\r", "")['replace'](".", "");

		$flags.push([flagName, description]);
	}
}


function categorizeflags()
{
	$catflags["generic"] = [];
	$catflags["recursive"] = [];
	$catflags["loop"] = [];
	$catflags["float"] = [];
	$catflags["string"] = [];
	$catflags["math"] = [];
	// "IRA"
	// "schedul"
	// "Common subexpression elimination"

	for (var i = 0; i < $flags.length; i++)
	{
		if ($flags[i][0].search("loop") != -1 || $flags[i][1].search("loop") != -1)
		{
			$catflags["loop"].push($flags[i]);
		}
		else if ($flags[i][0].search("math") != -1 || $flags[i][1].search("math") != -1)
		{
			$catflags["math"].push($flags[i]);
		}
		else if ($flags[i][0].search("recurs") != -1 || $flags[i][1].search("recurs") != -1)
		{
			$catflags["recursive"].push($flags[i]);
		}
		else if ($flags[i][0].search("string") != -1 || $flags[i][1].search("string") != -1)
		{
			$catflags["string"].push($flags[i]);
		}
		else if ($flags[i][0].search("float") != -1 || $flags[i][1].search("float") != -1)
		{
			$catflags["float"].push($flags[i]);
		}
		else
		{
			$catflags["generic"].push($flags[i]);
		}
	}
}


function printcatflags()
{
	for (var catIndex in $catflags)
	{
		console.log(catIndex + ":\n");
		var category = $catflags[catIndex];
		for (var i = 0; i < category.length; i++)
		{
			console.log(category[i][0] + " : " + category[i][1]);
		}
		console.log("\n\n");
	}
}

