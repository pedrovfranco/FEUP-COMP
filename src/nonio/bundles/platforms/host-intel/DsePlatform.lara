import DsePlatformBase;

import lara.metrics.ExecutionTimeMetric;
import lara.metrics.EnergyMetric;
import lara.metrics.FileSizeMetric;

DsePlatform._init = function() {
	DsePlatform._addMetric("performance", new ExecutionTimeMetric());
	DsePlatform._addMetric("energy", new EnergyMetric());
	DsePlatform._addMetric("size", new FileSizeMetric());
}

// Work-around, LARA currently does not support calling functions directly
DsePlatform._temp = DsePlatform._init();


DsePlatform.execute = function() {
	
	var application = new ProcessExecutor();
	application.setTimeout(LaradSetup.defaultTimelimit)
		.setPrintToConsole(false);
	
	application.execute(DseCompiler.getTestExecutable());
//	application.execute(DseCompiler.getTestExecutable() + " -c ../miniapp3_v3/dataset -p 1b9v");	// HACK (for MINIAPP)

//	println(application.getReturnValue()); //test
//        println(application._customReturnValue); // test
//	println(application.workingDir); // test	
//        println(Io.getPath("./").getAbsolutePath()); // test




	if(LaradSetup.isVerificationSeparated === true) {
		var verification = new ProcessExecutor();
		verification.setTimeout(LaradSetup.defaultTimelimit)
			.setPrintToConsole(false);
	
		// Execute verification in another ProcessExecutor
		verification.execute(DseCompiler.getVerificationExecutable());

		
		// Save result of verification ProcessExecutor		
		application.setCustomReturnValue(verification.getReturnValue());
	}
	
	return application;
}

