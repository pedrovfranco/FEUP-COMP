options
{
	LOOKAHEAD=1;
}

PARSER_BEGIN(Auto)

import java.io.File;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Auto
{
	public static void main(String args[]) throws ParseException
	{
		Auto auto;

		if (args.length == 0)
		{
			auto = new Auto(System.in);
		}
		else
		{
			try
			{
				File file = new File(args[0]);
				InputStream is = new FileInputStream(file);
				auto = new Auto(is);
			}
			catch (FileNotFoundException e)
			{
				System.out.println("File not found!");
				return;
			}
		}
		
		SimpleNode root = auto.Expression(); // devolve referência para o nó raiz da árvore

		root.dump(""); // imprime no ecrã a árvore
	}
}

PARSER_END(Auto)

SKIP :
{
	" " | "\r" | "\t" 
}

TOKEN:
{
	< INTEGER: (["0"-"9"])+ >
	// | <  >
	| < OP: "=" | "+" | "-" | "*" | "/" | "<" | ">" | "&" | "|" | "!" | "?" | "," | ";" | "^" | "~" | ":" | "." | "#" >
	| < OBRCK: "{" >
	| < CBRCK: "}" >
	| < OPRNT: "(" >
	| < CPRNT: ")" >
	| < IF: "if" >
	| < FOR: "for" >
	| < ID: (["a"-"z"]|["A"-"Z"])+ >
	| < LF: "\n" >
}

SimpleNode Expression(): {}
{
	Exp1() {return jjtThis;} // código Java entre chavetas
}

void Exp1(): {}
{
	(Op() | For())+
}

void Op(): {}
{
	<OP>
}

void For(): {}
{
	<FOR>
}


