/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. auto.jj */
/*@egen*/options
{
	LOOKAHEAD=1;
}

PARSER_BEGIN(Auto)

import java.io.File;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Auto/*@bgen(jjtree)*/implements AutoTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTAutoState jjtree = new JJTAutoState();

/*@egen*/
	public static void main(String args[]) throws ParseException
	{
		Auto auto;

		if (args.length == 0)
		{
			auto = new Auto(System.in);
		}
		else
		{
			try
			{
				File file = new File(args[0]);
				InputStream is = new FileInputStream(file);
				auto = new Auto(is);
			}
			catch (FileNotFoundException e)
			{
				System.out.println("File not found!");
				return;
			}
		}
		
		SimpleNode root = auto.Expression(); // devolve refer\u00eancia para o n\u00f3 raiz da \u00e1rvore

		root.dump(""); // imprime no ecr\u00e3 a \u00e1rvore
	}
}

PARSER_END(Auto)

SKIP :
{
	" " | "\r" | "\t" 
}

TOKEN:
{
	< INTEGER: (["0"-"9"])+ >
	// | <  >
	| < OP: "=" | "+" | "-" | "*" | "/" | "<" | ">" | "&" | "|" | "!" | "?" | "," | ";" | "^" | "~" | ":" | "." | "#" >
	| < OBRCK: "{" >
	| < CBRCK: "}" >
	| < OPRNT: "(" >
	| < CPRNT: ")" >
	| < IF: "if" >
	| < FOR: "for" >
	| < ID: (["a"-"z"]|["A"-"Z"])+ >
	| < LF: "\n" >
}

SimpleNode Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	Exp1()/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ // c\u00f3digo Java entre chavetas
}

void Exp1(): {/*@bgen(jjtree) Exp1 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exp1 */
        try {
/*@egen*/
	(Op() | For())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Op(): {/*@bgen(jjtree) Op */
  SimpleNode jjtn000 = new SimpleNode(JJTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Op */
        try {
/*@egen*/
	<OP>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void For(): {/*@bgen(jjtree) For */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) For */
        try {
/*@egen*/
	<FOR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}